name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
    PRJ_NAME: ShiftLight

jobs:
  check_and_export:
    runs-on: ubuntu-22.04
    container: 
      image: ghcr.io/kicad/kicad:8.0
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Mark repository as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Set version variable
        run: echo "HW_REV=$(git describe --tags --always)" >> $GITHUB_ENV

      - name: ERC
        id: erc
        if: '!cancelled()'
        run: |
          mkdir -p $HOME/.config
          cp -r /home/kicad/.config/kicad $HOME/.config/
          kicad-cli sch erc \
            ${PRJ_NAME}.kicad_sch \
            -D PROJECTNAME=${PRJ_NAME} \
            -D REVISION=${{ env.HW_REV }} \
            -D ISSUE_DATE=$(date +"%d.%m.%Y") \
            -o ${PRJ_NAME}_ERC_${{ env.HW_REV }}.report \
            --exit-code-violations

      - name: DRC
        id: drc
        if: '!cancelled()'
        run: |
          kicad-cli pcb drc \
            ${PRJ_NAME}.kicad_pcb \
            -o ${PRJ_NAME}_DRC_${{ env.HW_REV }}.report \
            --exit-code-violations

      - name: Export outputs
        id: outputs
        if: '!cancelled()'
        run: |
          sudo apt update
          sudo apt install -y ghostscript
          kicad-cli sch export pdf -D PROJECTNAME=${PRJ_NAME} -D REVISION=${{ env.HW_REV }} -D ISSUE_DATE=$(date +"%d.%m.%Y") ${PRJ_NAME}.kicad_sch -o ${PRJ_NAME}_Schematic_${{ env.HW_REV }}.pdf
          kicad-cli sch export bom --fields 'Reference,Value,${QUANTITY}' --exclude-dnp --group-by "Value" --field-delimiter ";" ${PRJ_NAME}.kicad_sch -o ${PRJ_NAME}_Bom_${{ env.HW_REV }}.csv
          kicad-cli pcb export pdf -l F.Fab,Edge.Cuts ${PRJ_NAME}.kicad_pcb -o top.pdf
          kicad-cli pcb export pdf -l B.Fab,Edge.Cuts --mirror ${PRJ_NAME}.kicad_pcb -o bot.pdf
          gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile=${PRJ_NAME}_Placement_${{ env.HW_REV }}.pdf top.pdf bot.pdf
          mkdir gerbers
          kicad-cli pcb export gerbers \
            -o gerbers \
            -l F.Cu,B.Cu,F.Paste,B.Paste,F.Silkscreen,B.Silkscreen,F.Mask,B.Mask,Edge.Cuts \
            --subtract-soldermask \
            ${PRJ_NAME}.kicad_pcb
          zip -j ${PRJ_NAME}_Gerber_${{ env.HW_REV }}.zip gerbers/*

      - name: Archive ERC report
        uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.erc.conclusion == 'failure' }}
        with:
          name: ${{ env.PRJ_NAME }}_ERC_${{ env.HW_REV }}
          path: ${{ env.PRJ_NAME }}_ERC_*.report

      - name: Archive DRC report
        uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.drc.conclusion == 'failure' }}
        with:
          name: ${{ env.PRJ_NAME }}_DRC_${{ env.HW_REV }}
          path: ${{ env.PRJ_NAME }}_DRC_*.report

      - name: Archive outputs
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() && steps.outputs.conclusion == 'success' }}
        with:
          name: ${{ env.PRJ_NAME }}_outputs_${{ env.HW_REV }}
          path: |
            ${{ env.PRJ_NAME }}_Schematic_*.pdf
            ${{ env.PRJ_NAME }}_Placement_*.pdf
            ${{ env.PRJ_NAME }}_Bom_*.csv
            ${{ env.PRJ_NAME }}_Gerber_*.zip

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/rev_*')
        with:
          files: |
            ${{ env.PRJ_NAME }}_Schematic_*.pdf
            ${{ env.PRJ_NAME }}_Placement_*.pdf
            ${{ env.PRJ_NAME }}_Bom_*.csv
            ${{ env.PRJ_NAME }}_Gerber_*.zip
